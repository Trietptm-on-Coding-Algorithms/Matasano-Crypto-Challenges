from Crypto.Cipher import AES
from secret import key

BLOCKSIZE = 16

iv = urandom(16)

def padding(s):
	s += (BLOCKSIZE - (len(s) % BLOCKSIZE))*chr((BLOCKSIZE - (len(s) % BLOCKSIZE)))
	return s

def MAC_generation(plaintext):
	plaintext = padding(plaintext)
	assert len(plaintext) % BLOCKSIZE == 0
	obj1 = AES.new(key, AES.MODE_CBC, iv)
	auth_tag = obj1.encrypt(plaintext)
	auth_tag = auth_tag[len(auth_tag)-16:]
	return auth_tag.encode("hex")

def MAC_auth(request):
	val_list = request.split("|")
	message = val_list[0]
	iv = val_list[1]
	auth_tag = val_list[2]
	if MAC_generation(message) == auth_tag:
		print "Valid Request!"
	else:
		print "Invalid Request!"

# Exploit
if __name__ == '__main__':
	
