from Crypto.Cipher import AES
from secret import flag

key = "YELLOW SUBMARINE"
iv = "\x00"*16

def pad(s):
	s += (16 - len(s) % 16)*chr(16 - len(s) % 16)
	return s

def xor_str(s1, s2):
	return "".join(map(lambda x: chr(ord(x[0]) ^ ord(x[1])), zip(s1, s2)))

def MAC_generation(plaintext):
	assert len(plaintext) % 16 == 0
	obj1 = AES.new(key, AES.MODE_CBC, iv)
	auth_tag = obj1.encrypt(plaintext)
	return auth_tag[len(auth_tag) - 16:].encode("hex")

	
# Finding another string with the same hash instead of finding a javascript code snippet
target_string = pad("alert('MZA who was that?');\x0a")
target_hash = MAC_generation(target_string)
print "Target string: ", target_string.encode("hex")
print "Target hash: ", target_hash

#Exploit
auth_first_block = MAC_generation(target_string[:16]).decode("hex")
xor_output = xor_str(auth_first_block, target_string[16:32])
auth_input_block = MAC_generation("alert('test!!!')").decode("hex")
auth_input_b2 = xor_str(auth_input_block, xor_output)
attack_string = "alert('test!!!')" + auth_input_b2
print "Attack string: ", attack_string.encode("hex")
print "Attack hash: ", MAC_generation(attack_string)
if MAC_generation(attack_string) == target_hash:
	print "Attack successful!"
else:
	print "Wrong, please try again!"


