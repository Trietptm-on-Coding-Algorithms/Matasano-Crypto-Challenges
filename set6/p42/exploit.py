from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from Crypto.Hash import *
from Crypto.Signature import PKCS1_v1_5
import os

# Find string s whose cube that ends with target_endofstr
def str2bin(s):
	s = [bin(ord(i))[2:].rjust(8, "0") for i in s]
	s = "".join(s)
	assert len(s) % 8 == 0
	return s

def find_target(target_endofstr, exponent):
	bin_target = str2bin(target_endofstr)
	print "-"*80
	print "Target string: ", bin_target
	print "-"*80 + "\n"

	len_bin_target = len(bin_target)
	
	result = ""
	for i in range(len_bin_target-1, -1, -1):
		test_result = i*'0' + '1' + result
		int_test_result = int(test_result, 2)

		test_result2 = i*'0' + '0' + result
		int_test_result2 = int(test_result2, 2)

		assert len(test_result) == len_bin_target
		assert len(test_result2) == len_bin_target

		if bin(int_test_result**exponent)[i-len_bin_target] == bin_target[i]:
			result = '1' + result
		else:
			result = '0' + result
	result = hex(int(result, 2))[2:].replace("L","")
	if len(result) % 2 == 1:
		result = '0' + result
	return result.decode("hex")

def true_cbrt(n):
    lo = 0
    hi = n
    while lo < hi:
        mid = (lo+hi)//2
        if mid**3 < n:
            lo = mid+1
        else:
            hi = mid
    return lo


#Testing the find_target() function
#result  = find_target("ashutos", 3)
#print "Result string: ", result
#print long_to_bytes(bytes_to_long(result)**3)[-7:] == "ashutos"


# Reading the public key file
key = RSA.importKey(open("public.key",'r').read())
n = key.n
e = key.e

# Finding the signature suffix
# string = "hi mom"

# Step-1: Finding the target string ie. the output which we want
string = "challenge"
h = MD5.new(string)
num = int(h.hexdigest(), 16)

assert num % 2 == 1

padded = PKCS1_v1_5.EMSA_PKCS1_V1_5_ENCODE(h, size(key.n)/8)[2:]

padded = padded.encode("hex")
print padded
index = padded.find("00")
padded = padded[index:].decode("hex")

res = find_target(padded, 3)
print long_to_bytes(bytes_to_long(res)**3).encode("hex")[-70:]

while True:
    prefix = bytes_to_long("\x00\x01" + os.urandom(1024/8 - 2))
    sig_prefix = long_to_bytes(true_cbrt(prefix))[:-35]
    sig = sig_prefix + res
    if "\x00" not in long_to_bytes(bytes_to_long(sig) ** 3)[:-35]:
        break

print "Signature obtained: "
print sig.encode("hex")