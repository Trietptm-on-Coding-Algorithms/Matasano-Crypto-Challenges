from Crypto.Util.number import *
from Crypto.PublicKey import RSA
from Crypto.Hash import *
from Crypto.Signature import PKCS1_v1_5

# Find string s whose cube that ends with target_endofstr
def str2bin(s):
	s = [bin(ord(i))[2:].rjust(8, "0") for i in s]
	s = "".join(s)
	assert len(s) % 8 == 0
	return s

def find_target(target_endofstr, exponent):
	bin_target = str2bin(target_endofstr)
	print "-"*80
	print "Target string: ", bin_target
	print "-"*80 + "\n"

	len_bin_target = len(bin_target)
	
	result = ""
	for i in range(len_bin_target-1, -1, -1):
		test_result = i*'0' + '1' + result
		int_test_result = int(test_result, 2)

		test_result2 = i*'0' + '0' + result
		int_test_result2 = int(test_result2, 2)

		if bin(int_test_result**exponent)[i-len_bin_target] == bin_target[i]:
			result = '1' + result
		elif bin(int_test_result2**exponent)[i-len_bin_target] == bin_target[i]:
			result = '0' + result
		else:
			print "Not possible"
			break
	result = hex(int(result, 2))[2:].replace("L","")
	if len(result) % 2 != 0:
		result = "00" + result
	return result.decode("hex")

def true_cbrt(n):
    lo = 0
    hi = n
    while lo < hi:
        mid = (lo+hi)//2
        if mid**3 < n:
            lo = mid+1
        else:
            hi = mid
    return lo

result  = find_target("ashutos", 3)
print "Result string: ", result.encode("hex")
print long_to_bytes(bytes_to_long(result)**3)[-7:] == "ashutos"

# Finding the signature suffix


