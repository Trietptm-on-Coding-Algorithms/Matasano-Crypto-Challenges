# Find string s whose cube that ends with target_endofstr
def str2bin(s):
	s = [bin(ord(i))[2:].rjust(8, "0") for i in s]
	s = "".join(s)
	assert len(s) % 8 == 0
	return s

def find_target(target_endofstr, exponent):
	bin_target = str2bin(target_endofstr)
	print "-"*80
	print "Target string: ", bin_target
	print "-"*80 + "\n"

	len_bin_target = len(bin_target)
	
	result = ""
	for i in range(len_bin_target-1, -1, -1):
		test_result = i*'0' + '1' + result
		int_test_result = int(test_result, 2)

		test_result2 = i*'0' + '0' + result
		int_test_result2 = int(test_result2, 2)

		if bin(int_test_result**exponent)[i-len_bin_target] == bin_target[i]:
			result = '1' + result
		elif bin(int_test_result2**exponent)[i-len_bin_target] == bin_target[i]:
			result = '0' + result
		else:
			print "Not possible"
			break
	return result, bin_target

result, bin_target = find_target("ashuto", 3)
print "Result string: ", result
len_bin_target = len(bin_target)
print "length of binary form of the target string: ", len_bin_target

# Confirming the result
binary_res = bin(int(result, 2)**3)[2:]
# Checking len_bin_target bits from the right equals bin_target or not
print binary_res[-len_bin_target:] == bin_target