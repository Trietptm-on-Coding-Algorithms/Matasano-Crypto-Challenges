from Crypto.Cipher import AES
from os import urandom
from Crypto.Util.number import *

key = urandom(16)
iv = urandom(16)

def padding(plaintext, blocksize):
	padlen = blocksize - (len(plaintext) % blocksize)
	pt_hex = plaintext.encode("hex") + padlen*(hex(padlen)[2:].zfill(2))
	return pt_hex.decode("hex")

def CBC_encrypt(plaintext, key, iv):
	plaintext = padding(plaintext, 16)
	obj1 = AES.new(key, AES.MODE_CBC, iv)
	return obj1.encrypt(plaintext).encode("hex")

def PKCS7pad_validate(text):
	padbyte = text[-1]
	padlen = ord(padbyte)
	if padlen <= 0 or padlen > 16:
		raise Exception
	else:
		i = 1
		while i <= padlen:
			if text[-i] != padbyte:
				raise Exception
			i += 1

def CBC_decrypt(ciphertext, key, iv):
	obj2 = AES.new(key, AES.MODE_CBC, iv)
	plaintext = obj2.decrypt(ciphertext)
	PKCS7pad_validate(plaintext)
	return plaintext


