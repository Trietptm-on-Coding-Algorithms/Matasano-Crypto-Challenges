from Crypto.Cipher import AES
import struct
from os import urandom

key = urandom(16)

class secret:
    def __init__(self, nonce, cnt):
        self.nonce = nonce
        self.cnt = cnt

    def count(self):
        c1 = struct.pack("<Q", self.nonce)
        c2 = struct.pack("<Q", self.cnt)
        c3 = c1 + c2
        self.cnt += 1
        return c3

def register(plaintext):
    plaintext = plaintext.replace('=', '?')
    plaintext = "comment1=cooking%20MCs;" + plaintext + ";comment2=%20like%20a%20pound%20of%20bacon"

    nonce = 0
    cnt = 0
    obj1 = AES.new(key, AES.MODE_CTR, counter = secret(nonce, cnt).count)
    return obj1.encrypt(plaintext)

def login(cookie):
    nonce = 0
    cnt = 0
    obj2 = AES.new(key, AES.MODE_CTR, counter = secret(nonce, cnt).count)
    plaintext = obj2.decrypt(cookie)
    plaintext = plaintext[23:-42]
    if plaintext == "admin=true":
        return "Welcome admin! Here is your flag: flag{CTR_Bit_Flipping!}"
    else:
        return "Logged in as " + plaintext + " Sorry you are not admin"

# Consider the above code running on a server and we only have access to register() and login() methods
#---------------------------------------------------------------------------------------------------------------------------------
# Exploit below
cookie = register("admin=true")
# The main idea is to find the index at which the byte is flipped, which is 28 here
cookie = cookie[:28] + chr(ord(cookie[28]) ^ ord("?") ^ ord("=")) + cookie[29:]
print login(cookie)
